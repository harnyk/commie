/* tslint:disable */
/* eslint-disable */
/**
 * Commie Plugin API
 * API for communication between Commie and plugins via CPCP (Commie Plugin Connectivity Protocol).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ToolManifest } from './ToolManifest';
import {
    ToolManifestFromJSON,
    ToolManifestFromJSONTyped,
    ToolManifestToJSON,
    ToolManifestToJSONTyped,
} from './ToolManifest';

/**
 * 
 * @export
 * @interface PluginManifest
 */
export interface PluginManifest {
    /**
     * Plugin name
     * @type {string}
     * @memberof PluginManifest
     */
    name: string;
    /**
     * Plugin description
     * @type {string}
     * @memberof PluginManifest
     */
    description: string;
    /**
     * Plugin version
     * @type {string}
     * @memberof PluginManifest
     */
    version: string;
    /**
     * Repository URL (if available)
     * @type {string}
     * @memberof PluginManifest
     */
    repository?: string;
    /**
     * Plugin website (if available)
     * @type {string}
     * @memberof PluginManifest
     */
    website?: string;
    /**
     * List of available command names
     * @type {Array<string>}
     * @memberof PluginManifest
     */
    commands: Array<string>;
    /**
     * Full tool manifests (similar to OpenAI API)
     * @type {Array<ToolManifest>}
     * @memberof PluginManifest
     */
    tools: Array<ToolManifest>;
    /**
     * Plugin-specific system prompt
     * @type {string}
     * @memberof PluginManifest
     */
    systemPrompt?: string | null;
}

/**
 * Check if a given object implements the PluginManifest interface.
 */
export function instanceOfPluginManifest(value: object): value is PluginManifest {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('commands' in value) || value['commands'] === undefined) return false;
    if (!('tools' in value) || value['tools'] === undefined) return false;
    return true;
}

export function PluginManifestFromJSON(json: any): PluginManifest {
    return PluginManifestFromJSONTyped(json, false);
}

export function PluginManifestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginManifest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'version': json['version'],
        'repository': json['repository'] == null ? undefined : json['repository'],
        'website': json['website'] == null ? undefined : json['website'],
        'commands': json['commands'],
        'tools': ((json['tools'] as Array<any>).map(ToolManifestFromJSON)),
        'systemPrompt': json['system_prompt'] == null ? undefined : json['system_prompt'],
    };
}

export function PluginManifestToJSON(json: any): PluginManifest {
    return PluginManifestToJSONTyped(json, false);
}

export function PluginManifestToJSONTyped(value?: PluginManifest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'description': value['description'],
        'version': value['version'],
        'repository': value['repository'],
        'website': value['website'],
        'commands': value['commands'],
        'tools': ((value['tools'] as Array<any>).map(ToolManifestToJSON)),
        'system_prompt': value['systemPrompt'],
    };
}

