/* tslint:disable */
/* eslint-disable */
/**
 * Commie Plugin API
 * API for communication between Commie and plugins via CPCP (Commie Plugin Connectivity Protocol).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetSystemPrompt200Response,
  PluginManifest,
  RunCommand200Response,
  RunCommandRequest,
  RunTools200Response,
  RunToolsRequest,
} from '../models/index';
import {
    GetSystemPrompt200ResponseFromJSON,
    GetSystemPrompt200ResponseToJSON,
    PluginManifestFromJSON,
    PluginManifestToJSON,
    RunCommand200ResponseFromJSON,
    RunCommand200ResponseToJSON,
    RunCommandRequestFromJSON,
    RunCommandRequestToJSON,
    RunTools200ResponseFromJSON,
    RunTools200ResponseToJSON,
    RunToolsRequestFromJSON,
    RunToolsRequestToJSON,
} from '../models/index';

export interface RunCommandOperationRequest {
    runCommandRequest: RunCommandRequest;
}

export interface RunToolsOperationRequest {
    runToolsRequest: RunToolsRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Retrieve plugin manifest
     */
    async getManifestRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginManifest>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manifest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginManifestFromJSON(jsonValue));
    }

    /**
     * Retrieve plugin manifest
     */
    async getManifest(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginManifest> {
        const response = await this.getManifestRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the system prompt of the plugin
     */
    async getSystemPromptRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSystemPrompt200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/get_system_prompt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSystemPrompt200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the system prompt of the plugin
     */
    async getSystemPrompt(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSystemPrompt200Response> {
        const response = await this.getSystemPromptRaw(initOverrides);
        return await response.value();
    }

    /**
     * Execute a command
     */
    async runCommandRaw(requestParameters: RunCommandOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RunCommand200Response>> {
        if (requestParameters['runCommandRequest'] == null) {
            throw new runtime.RequiredError(
                'runCommandRequest',
                'Required parameter "runCommandRequest" was null or undefined when calling runCommand().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/run_command`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RunCommandRequestToJSON(requestParameters['runCommandRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RunCommand200ResponseFromJSON(jsonValue));
    }

    /**
     * Execute a command
     */
    async runCommand(requestParameters: RunCommandOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RunCommand200Response> {
        const response = await this.runCommandRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Execute multiple tools in parallel
     */
    async runToolsRaw(requestParameters: RunToolsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RunTools200Response>> {
        if (requestParameters['runToolsRequest'] == null) {
            throw new runtime.RequiredError(
                'runToolsRequest',
                'Required parameter "runToolsRequest" was null or undefined when calling runTools().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/run_tools`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RunToolsRequestToJSON(requestParameters['runToolsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RunTools200ResponseFromJSON(jsonValue));
    }

    /**
     * Execute multiple tools in parallel
     */
    async runTools(requestParameters: RunToolsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RunTools200Response> {
        const response = await this.runToolsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
