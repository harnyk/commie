/*
Commie Plugin API

API for communication between Commie and plugins via CPCP (Commie Plugin Connectivity Protocol).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolManifest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolManifest{}

// ToolManifest struct for ToolManifest
type ToolManifest struct {
	// Tool name
	Name string `json:"name"`
	// Tool description
	Description string `json:"description"`
	// Description of input parameters (similar to OpenAI API)
	Parameters map[string]interface{} `json:"parameters"`
}

type _ToolManifest ToolManifest

// NewToolManifest instantiates a new ToolManifest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolManifest(name string, description string, parameters map[string]interface{}) *ToolManifest {
	this := ToolManifest{}
	this.Name = name
	this.Description = description
	this.Parameters = parameters
	return &this
}

// NewToolManifestWithDefaults instantiates a new ToolManifest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolManifestWithDefaults() *ToolManifest {
	this := ToolManifest{}
	return &this
}

// GetName returns the Name field value
func (o *ToolManifest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ToolManifest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ToolManifest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *ToolManifest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ToolManifest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ToolManifest) SetDescription(v string) {
	o.Description = v
}

// GetParameters returns the Parameters field value
func (o *ToolManifest) GetParameters() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value
// and a boolean to check if the value has been set.
func (o *ToolManifest) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// SetParameters sets field value
func (o *ToolManifest) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

func (o ToolManifest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolManifest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["parameters"] = o.Parameters
	return toSerialize, nil
}

func (o *ToolManifest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"parameters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolManifest := _ToolManifest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolManifest)

	if err != nil {
		return err
	}

	*o = ToolManifest(varToolManifest)

	return err
}

type NullableToolManifest struct {
	value *ToolManifest
	isSet bool
}

func (v NullableToolManifest) Get() *ToolManifest {
	return v.value
}

func (v *NullableToolManifest) Set(val *ToolManifest) {
	v.value = val
	v.isSet = true
}

func (v NullableToolManifest) IsSet() bool {
	return v.isSet
}

func (v *NullableToolManifest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolManifest(val *ToolManifest) *NullableToolManifest {
	return &NullableToolManifest{value: val, isSet: true}
}

func (v NullableToolManifest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolManifest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


