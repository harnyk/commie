/*
Commie Plugin API

API for communication between Commie and plugins via CPCP (Commie Plugin Connectivity Protocol).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunCommand200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunCommand200Response{}

// RunCommand200Response struct for RunCommand200Response
type RunCommand200Response struct {
	// System prompt generated by the command
	Prompt string `json:"prompt"`
}

type _RunCommand200Response RunCommand200Response

// NewRunCommand200Response instantiates a new RunCommand200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunCommand200Response(prompt string) *RunCommand200Response {
	this := RunCommand200Response{}
	this.Prompt = prompt
	return &this
}

// NewRunCommand200ResponseWithDefaults instantiates a new RunCommand200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunCommand200ResponseWithDefaults() *RunCommand200Response {
	this := RunCommand200Response{}
	return &this
}

// GetPrompt returns the Prompt field value
func (o *RunCommand200Response) GetPrompt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prompt
}

// GetPromptOk returns a tuple with the Prompt field value
// and a boolean to check if the value has been set.
func (o *RunCommand200Response) GetPromptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prompt, true
}

// SetPrompt sets field value
func (o *RunCommand200Response) SetPrompt(v string) {
	o.Prompt = v
}

func (o RunCommand200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunCommand200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["prompt"] = o.Prompt
	return toSerialize, nil
}

func (o *RunCommand200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"prompt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunCommand200Response := _RunCommand200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunCommand200Response)

	if err != nil {
		return err
	}

	*o = RunCommand200Response(varRunCommand200Response)

	return err
}

type NullableRunCommand200Response struct {
	value *RunCommand200Response
	isSet bool
}

func (v NullableRunCommand200Response) Get() *RunCommand200Response {
	return v.value
}

func (v *NullableRunCommand200Response) Set(val *RunCommand200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRunCommand200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRunCommand200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunCommand200Response(val *RunCommand200Response) *NullableRunCommand200Response {
	return &NullableRunCommand200Response{value: val, isSet: true}
}

func (v NullableRunCommand200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunCommand200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


