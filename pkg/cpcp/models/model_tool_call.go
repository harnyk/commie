/*
Commie Plugin API

API for communication between Commie and plugins via CPCP (Commie Plugin Connectivity Protocol).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolCall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolCall{}

// ToolCall struct for ToolCall
type ToolCall struct {
	// Name of the tool to invoke
	ToolName string `json:"tool_name"`
	// Input parameters for the tool
	Parameters map[string]interface{} `json:"parameters"`
}

type _ToolCall ToolCall

// NewToolCall instantiates a new ToolCall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolCall(toolName string, parameters map[string]interface{}) *ToolCall {
	this := ToolCall{}
	this.ToolName = toolName
	this.Parameters = parameters
	return &this
}

// NewToolCallWithDefaults instantiates a new ToolCall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolCallWithDefaults() *ToolCall {
	this := ToolCall{}
	return &this
}

// GetToolName returns the ToolName field value
func (o *ToolCall) GetToolName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToolName
}

// GetToolNameOk returns a tuple with the ToolName field value
// and a boolean to check if the value has been set.
func (o *ToolCall) GetToolNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolName, true
}

// SetToolName sets field value
func (o *ToolCall) SetToolName(v string) {
	o.ToolName = v
}

// GetParameters returns the Parameters field value
func (o *ToolCall) GetParameters() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value
// and a boolean to check if the value has been set.
func (o *ToolCall) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// SetParameters sets field value
func (o *ToolCall) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

func (o ToolCall) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolCall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tool_name"] = o.ToolName
	toSerialize["parameters"] = o.Parameters
	return toSerialize, nil
}

func (o *ToolCall) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tool_name",
		"parameters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolCall := _ToolCall{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolCall)

	if err != nil {
		return err
	}

	*o = ToolCall(varToolCall)

	return err
}

type NullableToolCall struct {
	value *ToolCall
	isSet bool
}

func (v NullableToolCall) Get() *ToolCall {
	return v.value
}

func (v *NullableToolCall) Set(val *ToolCall) {
	v.value = val
	v.isSet = true
}

func (v NullableToolCall) IsSet() bool {
	return v.isSet
}

func (v *NullableToolCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolCall(val *ToolCall) *NullableToolCall {
	return &NullableToolCall{value: val, isSet: true}
}

func (v NullableToolCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


