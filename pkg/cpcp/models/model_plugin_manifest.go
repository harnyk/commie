/*
Commie Plugin API

API for communication between Commie and plugins via CPCP (Commie Plugin Connectivity Protocol).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PluginManifest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PluginManifest{}

// PluginManifest struct for PluginManifest
type PluginManifest struct {
	// Plugin name
	Name string `json:"name"`
	// Plugin description
	Description string `json:"description"`
	// Plugin version
	Version string `json:"version"`
	// Repository URL (if available)
	Repository *string `json:"repository,omitempty"`
	// Plugin website (if available)
	Website *string `json:"website,omitempty"`
	// List of available command names
	Commands []string `json:"commands"`
	// Full tool manifests (similar to OpenAI API)
	Tools []ToolManifest `json:"tools"`
	// Plugin-specific system prompt
	SystemPrompt NullableString `json:"system_prompt,omitempty"`
}

type _PluginManifest PluginManifest

// NewPluginManifest instantiates a new PluginManifest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginManifest(name string, description string, version string, commands []string, tools []ToolManifest) *PluginManifest {
	this := PluginManifest{}
	this.Name = name
	this.Description = description
	this.Version = version
	this.Commands = commands
	this.Tools = tools
	return &this
}

// NewPluginManifestWithDefaults instantiates a new PluginManifest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginManifestWithDefaults() *PluginManifest {
	this := PluginManifest{}
	return &this
}

// GetName returns the Name field value
func (o *PluginManifest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PluginManifest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PluginManifest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *PluginManifest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PluginManifest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PluginManifest) SetDescription(v string) {
	o.Description = v
}

// GetVersion returns the Version field value
func (o *PluginManifest) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *PluginManifest) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *PluginManifest) SetVersion(v string) {
	o.Version = v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *PluginManifest) GetRepository() string {
	if o == nil || IsNil(o.Repository) {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManifest) GetRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *PluginManifest) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *PluginManifest) SetRepository(v string) {
	o.Repository = &v
}

// GetWebsite returns the Website field value if set, zero value otherwise.
func (o *PluginManifest) GetWebsite() string {
	if o == nil || IsNil(o.Website) {
		var ret string
		return ret
	}
	return *o.Website
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManifest) GetWebsiteOk() (*string, bool) {
	if o == nil || IsNil(o.Website) {
		return nil, false
	}
	return o.Website, true
}

// HasWebsite returns a boolean if a field has been set.
func (o *PluginManifest) HasWebsite() bool {
	if o != nil && !IsNil(o.Website) {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given string and assigns it to the Website field.
func (o *PluginManifest) SetWebsite(v string) {
	o.Website = &v
}

// GetCommands returns the Commands field value
func (o *PluginManifest) GetCommands() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Commands
}

// GetCommandsOk returns a tuple with the Commands field value
// and a boolean to check if the value has been set.
func (o *PluginManifest) GetCommandsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Commands, true
}

// SetCommands sets field value
func (o *PluginManifest) SetCommands(v []string) {
	o.Commands = v
}

// GetTools returns the Tools field value
func (o *PluginManifest) GetTools() []ToolManifest {
	if o == nil {
		var ret []ToolManifest
		return ret
	}

	return o.Tools
}

// GetToolsOk returns a tuple with the Tools field value
// and a boolean to check if the value has been set.
func (o *PluginManifest) GetToolsOk() ([]ToolManifest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tools, true
}

// SetTools sets field value
func (o *PluginManifest) SetTools(v []ToolManifest) {
	o.Tools = v
}

// GetSystemPrompt returns the SystemPrompt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PluginManifest) GetSystemPrompt() string {
	if o == nil || IsNil(o.SystemPrompt.Get()) {
		var ret string
		return ret
	}
	return *o.SystemPrompt.Get()
}

// GetSystemPromptOk returns a tuple with the SystemPrompt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PluginManifest) GetSystemPromptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SystemPrompt.Get(), o.SystemPrompt.IsSet()
}

// HasSystemPrompt returns a boolean if a field has been set.
func (o *PluginManifest) HasSystemPrompt() bool {
	if o != nil && o.SystemPrompt.IsSet() {
		return true
	}

	return false
}

// SetSystemPrompt gets a reference to the given NullableString and assigns it to the SystemPrompt field.
func (o *PluginManifest) SetSystemPrompt(v string) {
	o.SystemPrompt.Set(&v)
}
// SetSystemPromptNil sets the value for SystemPrompt to be an explicit nil
func (o *PluginManifest) SetSystemPromptNil() {
	o.SystemPrompt.Set(nil)
}

// UnsetSystemPrompt ensures that no value is present for SystemPrompt, not even an explicit nil
func (o *PluginManifest) UnsetSystemPrompt() {
	o.SystemPrompt.Unset()
}

func (o PluginManifest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PluginManifest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["version"] = o.Version
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.Website) {
		toSerialize["website"] = o.Website
	}
	toSerialize["commands"] = o.Commands
	toSerialize["tools"] = o.Tools
	if o.SystemPrompt.IsSet() {
		toSerialize["system_prompt"] = o.SystemPrompt.Get()
	}
	return toSerialize, nil
}

func (o *PluginManifest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"version",
		"commands",
		"tools",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPluginManifest := _PluginManifest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPluginManifest)

	if err != nil {
		return err
	}

	*o = PluginManifest(varPluginManifest)

	return err
}

type NullablePluginManifest struct {
	value *PluginManifest
	isSet bool
}

func (v NullablePluginManifest) Get() *PluginManifest {
	return v.value
}

func (v *NullablePluginManifest) Set(val *PluginManifest) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginManifest) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginManifest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginManifest(val *PluginManifest) *NullablePluginManifest {
	return &NullablePluginManifest{value: val, isSet: true}
}

func (v NullablePluginManifest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginManifest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


