/*
Commie Plugin API

API for communication between Commie and plugins via CPCP (Commie Plugin Connectivity Protocol).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolOutput{}

// ToolOutput struct for ToolOutput
type ToolOutput struct {
	// Name of the executed tool
	ToolName string `json:"tool_name"`
	// Tool execution results
	Result map[string]interface{} `json:"result"`
}

type _ToolOutput ToolOutput

// NewToolOutput instantiates a new ToolOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolOutput(toolName string, result map[string]interface{}) *ToolOutput {
	this := ToolOutput{}
	this.ToolName = toolName
	this.Result = result
	return &this
}

// NewToolOutputWithDefaults instantiates a new ToolOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolOutputWithDefaults() *ToolOutput {
	this := ToolOutput{}
	return &this
}

// GetToolName returns the ToolName field value
func (o *ToolOutput) GetToolName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToolName
}

// GetToolNameOk returns a tuple with the ToolName field value
// and a boolean to check if the value has been set.
func (o *ToolOutput) GetToolNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolName, true
}

// SetToolName sets field value
func (o *ToolOutput) SetToolName(v string) {
	o.ToolName = v
}

// GetResult returns the Result field value
func (o *ToolOutput) GetResult() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *ToolOutput) GetResultOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Result, true
}

// SetResult sets field value
func (o *ToolOutput) SetResult(v map[string]interface{}) {
	o.Result = v
}

func (o ToolOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tool_name"] = o.ToolName
	toSerialize["result"] = o.Result
	return toSerialize, nil
}

func (o *ToolOutput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tool_name",
		"result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolOutput := _ToolOutput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolOutput)

	if err != nil {
		return err
	}

	*o = ToolOutput(varToolOutput)

	return err
}

type NullableToolOutput struct {
	value *ToolOutput
	isSet bool
}

func (v NullableToolOutput) Get() *ToolOutput {
	return v.value
}

func (v *NullableToolOutput) Set(val *ToolOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableToolOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableToolOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolOutput(val *ToolOutput) *NullableToolOutput {
	return &NullableToolOutput{value: val, isSet: true}
}

func (v NullableToolOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


