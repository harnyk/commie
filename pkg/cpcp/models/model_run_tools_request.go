/*
Commie Plugin API

API for communication between Commie and plugins via CPCP (Commie Plugin Connectivity Protocol).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunToolsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunToolsRequest{}

// RunToolsRequest struct for RunToolsRequest
type RunToolsRequest struct {
	ToolCalls []ToolCall `json:"tool_calls"`
}

type _RunToolsRequest RunToolsRequest

// NewRunToolsRequest instantiates a new RunToolsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunToolsRequest(toolCalls []ToolCall) *RunToolsRequest {
	this := RunToolsRequest{}
	this.ToolCalls = toolCalls
	return &this
}

// NewRunToolsRequestWithDefaults instantiates a new RunToolsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunToolsRequestWithDefaults() *RunToolsRequest {
	this := RunToolsRequest{}
	return &this
}

// GetToolCalls returns the ToolCalls field value
func (o *RunToolsRequest) GetToolCalls() []ToolCall {
	if o == nil {
		var ret []ToolCall
		return ret
	}

	return o.ToolCalls
}

// GetToolCallsOk returns a tuple with the ToolCalls field value
// and a boolean to check if the value has been set.
func (o *RunToolsRequest) GetToolCallsOk() ([]ToolCall, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToolCalls, true
}

// SetToolCalls sets field value
func (o *RunToolsRequest) SetToolCalls(v []ToolCall) {
	o.ToolCalls = v
}

func (o RunToolsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunToolsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tool_calls"] = o.ToolCalls
	return toSerialize, nil
}

func (o *RunToolsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tool_calls",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunToolsRequest := _RunToolsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunToolsRequest)

	if err != nil {
		return err
	}

	*o = RunToolsRequest(varRunToolsRequest)

	return err
}

type NullableRunToolsRequest struct {
	value *RunToolsRequest
	isSet bool
}

func (v NullableRunToolsRequest) Get() *RunToolsRequest {
	return v.value
}

func (v *NullableRunToolsRequest) Set(val *RunToolsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRunToolsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRunToolsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunToolsRequest(val *RunToolsRequest) *NullableRunToolsRequest {
	return &NullableRunToolsRequest{value: val, isSet: true}
}

func (v NullableRunToolsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunToolsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


